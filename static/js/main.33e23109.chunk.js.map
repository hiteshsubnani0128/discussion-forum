{"version":3,"sources":["components/CardHeader.jsx","components/Discussion.jsx","App.js","reportWebVitals.js","index.js"],"names":["CardHeader","props","className","postedByUser","date","seconds","Math","floor","Date","interval","timeSince","timeStamp","users","ReplyInput","onSubmit","handelSubmitInputChange","name","postId","placeholder","onChange","handelReplyInputChange","required","Comments","useState","showInput","setInput","commentInp","setCommentInput","comments","setComment","data","content","voteCount","src","width","onClick","voteUp","alt","downVote","e","console","log","target","value","preventDefault","user","random","commentDetails","now","commentId","newPosts","push","length","map","comment","key","newPostArray","Discussion","App","post","setPost","inputText","userDetails","autoComplete","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPA2CeA,MAzCf,SAAoBC,GA+BhB,OACI,sBAAKC,UAAU,aAAf,UACID,EAAME,aACR,sBAAMD,UAAU,qBAAhB,SA/BN,SAAmBE,GACf,IAAIC,EAAUC,KAAKC,OAAO,IAAIC,KAASJ,GAAQ,KAC3CK,EAAWJ,EAAU,QACzB,OAAII,EAAW,EACNH,KAAKC,MAAME,GAAY,UAEhCA,EAAWJ,EAAU,QACN,EACNC,KAAKC,MAAME,GAAY,WAEhCA,EAAWJ,EAAU,OACN,EACNC,KAAKC,MAAME,GAAY,SAEhCA,EAAWJ,EAAU,MACN,EACNC,KAAKC,MAAME,GAAY,UAEhCA,EAAWJ,EAAU,IACN,EACNC,KAAKC,MAAME,GAAY,WAEP,IAAtBH,KAAKC,MAAMF,GACL,WAEFC,KAAKC,MAAMF,GAAW,WAOvBK,CAAU,IAAIF,KAAKP,EAAMU,kBClCjCC,EAAQ,CAAC,SAAU,UAAW,cAAe,QAAS,OAEtDC,EAAa,SAACZ,GAClB,OACE,8BACE,sBAAMa,SAAUb,EAAMc,wBAAtB,SACE,uBAAOC,KAAMf,EAAMgB,OAAQf,UAAU,yBAAyBgB,YAAY,mBAAmBC,SAAWlB,EAAMmB,uBAAyBC,UAAQ,SAQvJ,SAASC,EAASrB,GAAO,IAAD,EACQsB,oBAAS,GADjB,mBACfC,EADe,KACJC,EADI,OAEgBF,mBAAS,IAFzB,mBAEfG,EAFe,KAEHC,EAFG,OAGSJ,mBAAS,IAHlB,mBAGfK,EAHe,KAGLC,EAHK,KA2CpB,OACE,sBAAK3B,UAAU,qBAAf,UACE,cAAC,EAAD,CAAYC,aAAcF,EAAM6B,KAAK3B,aAAcQ,UAAWV,EAAM6B,KAAKnB,YACzE,oBAAGT,UAAU,UAAb,cAA0BD,EAAM6B,KAAKC,QAArC,OACA,gCACI9B,EAAM6B,KAAKE,UADf,IAC2B,qBAAK9B,UAAU,aAAa+B,IAAI,uDAAuDC,MAAM,OAAOC,QAASlC,EAAMmC,OAAQC,IAAI,YACxJ,qBAAKnC,UAAU,aAAa+B,IAAI,uDAAuDC,MAAM,OAAOG,IAAI,YAAYF,QAASlC,EAAMqC,WACnI,sBAAMpC,UAAU,iBAAiBiC,QAAS,kBAAIV,GAAUD,IAAxD,mBACEA,EAAY,cAAC,EAAD,CAAYP,OAAQhB,EAAM6B,KAAKb,OAAQG,uBA9C9B,SAACmB,GAC9BC,QAAQC,IAAIF,EAAEG,OAAOC,OACrBhB,EAAgBY,EAAEG,OAAOC,QA4CoF5B,wBAzC/E,SAACwB,GAC/BA,EAAEK,iBACF,IAAIC,EAAOjC,EAAMN,KAAKC,MAAoB,EAAdD,KAAKwC,WAE3BC,EAAiB,CACrB5C,aAAc0C,EACdlC,UAAYH,KAAKwC,MACjBC,UAAYJ,EAAOvC,KAAKC,MAAoB,IAAdD,KAAKwC,UACnCf,QAAUL,EACVM,UAAU,GAEVQ,QAAQC,IAAIM,GAEZ,IAAIG,EAAQ,YAAOtB,GACnBsB,EAASC,KAAKJ,GACdlB,EAAWqB,GACXvB,EAAgB,IAChBF,GAAUD,GACVgB,QAAQC,IAAIb,MAuBwJ,QAElK,6BACIA,EAASwB,OAAO,EAChBxB,EAASyB,KAAI,SAACC,EAASC,GACvB,OAAO,cAACjC,EAAD,CAAUQ,KAAQwB,EAASlB,OAAQ,kBAzBrC,SAACG,GACd,IAAIiB,EAAY,YAAO5B,KACrB4B,EAAajB,GAAGP,UAClBH,EAAW2B,GAsB6CpB,CAAOmB,IAAOjB,SAAY,kBAnBnE,SAACC,GAChB,IAAIiB,EAAY,YAAO5B,KACrB4B,EAAajB,GAAGP,UAClBH,EAAW2B,GAgB6ElB,CAASiB,SAEzF,UAqEKE,MA/DjB,SAAoBxD,GAAO,IAAD,EACMsB,oBAAS,GADf,mBACjBC,EADiB,KACNC,EADM,OAEcF,mBAAS,IAFvB,mBAEjBG,EAFiB,KAELC,EAFK,OAGOJ,mBAAS,IAHhB,mBAGjBK,EAHiB,KAGPC,EAHO,KA4CtB,OACE,sBAAK3B,UAAU,qBAAf,UACE,cAAC,EAAD,CAAYC,aAAcF,EAAM6B,KAAK3B,aAAcQ,UAAWV,EAAM6B,KAAKnB,YACzE,oBAAGT,UAAU,UAAb,cAA0BD,EAAM6B,KAAKC,QAArC,OACA,gCACI9B,EAAM6B,KAAKE,UADf,IAC2B,qBAAK9B,UAAU,aAAa+B,IAAI,uDAAuDC,MAAM,OAAOC,QAASlC,EAAMmC,OAAQC,IAAI,YACxJ,qBAAKnC,UAAU,aAAa+B,IAAI,uDAAuDC,MAAM,OAAOG,IAAI,YAAYF,QAASlC,EAAMqC,WACnI,sBAAMpC,UAAU,iBAAiBiC,QAAS,kBAAIV,GAAUD,IAAxD,mBACEA,EAAY,cAAC,EAAD,CAAYP,OAAQhB,EAAM6B,KAAKb,OAAQG,uBA/C9B,SAACmB,GAC9BC,QAAQC,IAAIF,EAAEG,OAAOC,OACrBhB,EAAgBY,EAAEG,OAAOC,QA6CoF5B,wBA9B/E,SAACwB,GAC/BA,EAAEK,iBACF,IAAIC,EAAOjC,EAAMN,KAAKC,MAAoB,EAAdD,KAAKwC,WAE3BC,EAAiB,CACrB5C,aAAc0C,EACdlC,UAAYH,KAAKwC,MACjBC,UAAYJ,EAAOvC,KAAKC,MAAoB,IAAdD,KAAKwC,UACnCf,QAAUL,EACVM,UAAU,GAEVQ,QAAQC,IAAIM,GAEZ,IAAIG,EAAQ,YAAOtB,GACnBsB,EAASC,KAAKJ,GACdlB,EAAWqB,GACXvB,EAAgB,IAChBF,GAAUD,GACVgB,QAAQC,IAAIb,MAYwJ,QAElK,6BACIA,EAASyB,KAAI,SAACC,EAASC,GACvB,OAAO,cAACjC,EAAD,CAAUQ,KAAQwB,EAASlB,OAAQ,kBA9CrC,SAACG,GACd,IAAIiB,EAAY,YAAO5B,KACrB4B,EAAajB,GAAGP,UAClBH,EAAW2B,GA2C6CpB,CAAOmB,IAAOjB,SAAY,kBAxCnE,SAACC,GAChB,IAAIiB,EAAY,YAAO5B,KACrB4B,EAAajB,GAAGP,UAClBH,EAAW2B,GAqC6ElB,CAASiB,eCrI/F3C,EAAQ,CAAC,SAAU,UAAW,cAAe,QAAS,OA+E7C8C,MA5Ef,WAAgB,IAAD,EAEWnC,mBAAS,CAAC,CAChCpB,aAAa,SACbQ,UAAWH,KAAKwC,MAChB/B,OAAQ,YACRc,QAAQ,kBACRC,UAAW,KAPA,mBAEN2B,EAFM,KAEAC,EAFA,OAyBiBrC,qBAzBjB,mBAyBNsC,EAzBM,KAyBKpC,EAzBL,KAoDPW,EAAS,SAACG,GACd,IAAIiB,EAAY,YAAOG,KACrBH,EAAajB,GAAGP,UAClB4B,EAAQJ,IAGJlB,EAAW,SAACC,GAChB,IAAIiB,EAAY,YAAOG,KACrBH,EAAajB,GAAGP,UAClB4B,EAAQJ,IAGV,OACE,sBAAKtD,UAAU,6BAAf,UACE,sBAAMA,UAAU,YAAYY,SAvCV,SAACyB,GAGnBA,EAAEK,iBAEF,IAAIC,EAAOjC,EAAMN,KAAKC,MAAoB,EAAdD,KAAKwC,WAC7BgB,EAAc,CAClB3D,aAAc0C,EACdlC,UAAYH,KAAKwC,MACjB/B,OAAS4B,EAAOvC,KAAKC,MAAoB,IAAdD,KAAKwC,UAChCf,QAAU8B,EACV7B,UAAU,GAINkB,EAAQ,YAAOS,GACnBT,EAASC,KAAKW,GACdF,EAAQV,GACRzB,EAAS,KAqBT,SACE,uBAAOvB,UAAU,eAAec,KAAK,cAAcE,YAAY,wBAAwBC,SAnBnE,SAACoB,GACzBd,EAASc,EAAEG,OAAOC,QAkBsGA,MAAOkB,EAAWxC,UAAQ,EAAC0C,aAAa,UAE1JJ,EAAKN,KAAK,SAACM,EAAMJ,GACjB,OAAO,cAAC,EAAD,CAAYzB,KAAO6B,EAAOvB,OAAQ,kBAAMA,EAAOmB,IAAOjB,SAAY,kBAAMA,EAASiB,aCjEnFS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.33e23109.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction CardHeader(props){\r\n\r\n    // Function to Calculate Time\r\n    function timeSince(date) {\r\n        var seconds = Math.floor((new Date() - date) / 1000);\r\n        var interval = seconds / 31536000;\r\n        if (interval > 1) {\r\n          return Math.floor(interval) + \" years\";\r\n        }\r\n        interval = seconds / 2592000;\r\n        if (interval > 1) {\r\n          return Math.floor(interval) + \" months\";\r\n        }\r\n        interval = seconds / 86400;\r\n        if (interval > 1) {\r\n          return Math.floor(interval) + \" days\";\r\n        }\r\n        interval = seconds / 3600;\r\n        if (interval > 1) {\r\n          return Math.floor(interval) + \" hours\";\r\n        }\r\n        interval = seconds / 60;\r\n        if (interval > 1) {\r\n          return Math.floor(interval) + \" minutes\";\r\n        }\r\n        if(Math.floor(seconds)===0){\r\n          return \"Just Now\";\r\n        }\r\n        return Math.floor(seconds) + \" seconds\";\r\n      }\r\n\r\n    return(\r\n        <div className=\"text-muted\">\r\n          { props.postedByUser }\r\n          <span className=\"text-muted-low p-2\"> \r\n            { timeSince(new Date(props.timeStamp)) }\r\n          </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardHeader;","import React, { useState } from 'react';\r\nimport CardHeader from './CardHeader';\r\n\r\nconst users = ['Hitesh', 'Jon Doe', 'Lorem Itsum', 'Bunny', 'Kim'];\r\n\r\nconst ReplyInput = (props) => {\r\n  return (\r\n    <div>\r\n      <form onSubmit={props.handelSubmitInputChange}>\r\n        <input name={props.postId} className=\"form-control mt-2 my-2\" placeholder=\"Enter your reply\" onChange={ props.handelReplyInputChange } required/>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nfunction Comments(props){  \r\n  const [showInput, setInput] = useState(false);\r\n  const [commentInp, setCommentInput] = useState('');\r\n  const [comments, setComment] = useState([]);\r\n\r\n  const handelReplyInputChange = (e) => {\r\n    console.log(e.target.value);\r\n    setCommentInput(e.target.value);\r\n  }\r\n\r\n  const handelSubmitInputChange = (e) => {\r\n    e.preventDefault();\r\n    let user = users[Math.floor(Math.random()*4)];\r\n\r\n      let commentDetails = {\r\n      postedByUser: user,\r\n      timeStamp : Date.now(),\r\n      commentId : user + Math.floor(Math.random()*1000),\r\n      content : commentInp,\r\n      voteCount:0\r\n      }\r\n      console.log(commentDetails);\r\n      // This will update to array of set\r\n      let newPosts = [...comments];\r\n      newPosts.push(commentDetails);\r\n      setComment(newPosts);\r\n      setCommentInput('');\r\n      setInput(!showInput);\r\n      console.log(comments);\r\n  }\r\n\r\n  const voteUp = (e) => {\r\n    var newPostArray = [...comments];\r\n    ++newPostArray[e].voteCount;\r\n    setComment(newPostArray); \r\n  }\r\n\r\n  const downVote = (e) => {\r\n    var newPostArray = [...comments];\r\n    --newPostArray[e].voteCount;\r\n    setComment(newPostArray); \r\n  }\r\n\r\n    return(\r\n      <div className=\"text-left card-div\">\r\n        <CardHeader postedByUser={props.data.postedByUser} timeStamp={props.data.timeStamp} />\r\n        <p className=\"content\"> { props.data.content } </p>\r\n        <div>\r\n          { props.data.voteCount } <img className=\"image-vote\" src=\"https://static.thenounproject.com/png/341249-200.png\" width=\"30px\" onClick={props.voteUp} alt=\"Vote Up\" /> \r\n          <img className=\"image-vote\" src=\"https://static.thenounproject.com/png/341237-200.png\" width=\"30px\" alt=\"Down vote\" onClick={props.downVote}/> \r\n          <span className=\"cursor-pointer\" onClick={()=>setInput(!showInput)} >reply</span>\r\n          { showInput ? <ReplyInput postId={props.data.postId} handelReplyInputChange = {handelReplyInputChange} handelSubmitInputChange = {handelSubmitInputChange} /> : null }\r\n        </div>\r\n        <ul>\r\n          { comments.length>0 ? \r\n            comments.map((comment, key) => {\r\n            return(<Comments data = {comment} voteUp={() => voteUp(key) } downVote = {() => downVote(key)} />)\r\n          })\r\n          : null }\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n\r\nfunction Discussion(props){  \r\n  const [showInput, setInput] = useState(false);\r\n  const [commentInp, setCommentInput] = useState('');\r\n  const [comments, setComment] = useState([]);\r\n\r\n  const handelReplyInputChange = (e) => {\r\n    console.log(e.target.value);\r\n    setCommentInput(e.target.value);\r\n  }\r\n\r\n  const voteUp = (e) => {\r\n    var newPostArray = [...comments];\r\n    ++newPostArray[e].voteCount;\r\n    setComment(newPostArray); \r\n  }\r\n\r\n  const downVote = (e) => {\r\n    var newPostArray = [...comments];\r\n    --newPostArray[e].voteCount;\r\n    setComment(newPostArray); \r\n  }\r\n\r\n  const handelSubmitInputChange = (e) => {\r\n    e.preventDefault();\r\n    let user = users[Math.floor(Math.random()*4)];\r\n\r\n      let commentDetails = {\r\n      postedByUser: user,\r\n      timeStamp : Date.now(),\r\n      commentId : user + Math.floor(Math.random()*1000),\r\n      content : commentInp,\r\n      voteCount:0\r\n      }\r\n      console.log(commentDetails);\r\n      // This will update to array of set\r\n      let newPosts = [...comments];\r\n      newPosts.push(commentDetails);\r\n      setComment(newPosts);\r\n      setCommentInput('');\r\n      setInput(!showInput);\r\n      console.log(comments);\r\n  }\r\n\r\n\r\n    return(\r\n      <div className=\"text-left card-div\">\r\n        <CardHeader postedByUser={props.data.postedByUser} timeStamp={props.data.timeStamp} />\r\n        <p className=\"content\"> { props.data.content } </p>\r\n        <div>\r\n          { props.data.voteCount } <img className=\"image-vote\" src=\"https://static.thenounproject.com/png/341249-200.png\" width=\"30px\" onClick={props.voteUp} alt=\"Vote Up\" /> \r\n          <img className=\"image-vote\" src=\"https://static.thenounproject.com/png/341237-200.png\" width=\"30px\" alt=\"Down vote\" onClick={props.downVote}/> \r\n          <span className=\"cursor-pointer\" onClick={()=>setInput(!showInput)} >reply</span>\r\n          { showInput ? <ReplyInput postId={props.data.postId} handelReplyInputChange = {handelReplyInputChange} handelSubmitInputChange = {handelSubmitInputChange} /> : null }\r\n        </div>\r\n        <ul>\r\n          { comments.map((comment, key) => {\r\n            return(<Comments data = {comment} voteUp={() => voteUp(key) } downVote = {() => downVote(key) }/>)\r\n          }) }\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Discussion;","import React, { useState } from 'react';\nimport './App.css';\nimport Discussion from './components/Discussion';\n\nconst users = ['Hitesh', 'Jon Doe', 'Lorem Itsum', 'Bunny', 'Kim'];\n\n\nfunction App() {\n\n  const [post, setPost] = useState([{\n    postedByUser:'Hitesh',\n    timeStamp: Date.now(),\n    postId: 'rxgyuioer',\n    content:'Hey I am Hitesh',\n    voteCount: 1,\n    // comments: [{\n    //     commentedByUser : 'Ron',\n    //     timeStamp: Date.now(),\n    //     content:'Hi Hitesh How are you!',\n    //     voteCount: 1,\n    //     commentFor: 'rxgyuioer'\n    // }]\n  }]);\n\n  // const [comments, setComment] = useState([{\n  //     commentedByUser : 'Ron',\n  //     timeStamp: Date.now(),\n  //     content:'Hi Hitesh How are you!',\n  //     voteCount: 1,\n  //     commentFor: 'rxgyuioer'\n  // }]);\n\n  const [inputText, setInput] = useState();\n\n  const handelChanges = (e) =>{\n    // console.log(e);\n    // When user will press Enter adding data\n      e.preventDefault();\n\n      let user = users[Math.floor(Math.random()*4)];\n      let userDetails = {\n      postedByUser: user,\n      timeStamp : Date.now(),\n      postId : user + Math.floor(Math.random()*1000),\n      content : inputText,\n      voteCount:0\n      }\n\n      // This will update to array of set\n      let newPosts = [...post];\n      newPosts.push(userDetails);\n      setPost(newPosts);\n      setInput('');\n  }\n\n  const handelInputChange = (e)=>{\n    setInput(e.target.value);\n  }\n\n  const voteUp = (e) => {\n    var newPostArray = [...post];\n    ++newPostArray[e].voteCount;\n    setPost(newPostArray); \n  }\n\n  const downVote = (e) => {\n    var newPostArray = [...post];\n    --newPostArray[e].voteCount;\n    setPost(newPostArray); \n  }\n\n  return (\n    <div className=\"container text-center mt-5\">\n      <form className=\"jumbotron\" onSubmit={handelChanges}>\n        <input className=\"form-control\" name=\"mainContent\" placeholder=\"Create new discussion\" onChange={handelInputChange} value={inputText} required autoComplete=\"off\"/>\n      </form>\n        { post.map( (post, key) =>{\n          return(<Discussion data={ post } voteUp={() => voteUp(key) } downVote = {() => downVote(key) } />)\n        })}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}